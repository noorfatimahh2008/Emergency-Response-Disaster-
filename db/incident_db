import sys
import os
import json
from datetime import datetime

# Allow module imports from parent
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import sqlite3
from models.incident import Incident

class IncidentDB:
    def __init__(self, db_path="data/disasters.db"):
        self.conn = sqlite3.connect(db_path)
        self.conn.row_factory = sqlite3.Row  # ✅ this enables dict-like access
        self.create_table()


    def create_table(self):
        with self.conn:
            self.conn.execute("""
                CREATE TABLE IF NOT EXISTS incidents (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    type TEXT NOT NULL,
                    lat REAL,
                    lng REAL,
                    magnitude REAL,
                    location TEXT,
                    time TEXT,
                    source TEXT
                )
            """)

    def insert_incident(self, incident: Incident):
        with self.conn:
            exists = self.conn.execute("""
                SELECT id FROM incidents WHERE time = ? AND location = ? AND source = ?
            """, (incident.time, incident.location, incident.source)).fetchone()

            if exists:
                print(f"⏭️ Skipped duplicate: {incident.location} at {incident.time}")
                return

            self.conn.execute("""
                INSERT INTO incidents (type, lat, lng, magnitude, location, time, source)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                incident.type,
                incident.lat,
                incident.lng,
                incident.magnitude,
                incident.location,
                incident.time,
                incident.source
            ))
            print(f"✅ Inserted: {incident.location} at {incident.time}")

  
    def query_by_type(self, incident_type):
        with self.conn:
            rows = self.conn.execute("""
                SELECT * FROM incidents WHERE type = ? ORDER BY time DESC
            """, (incident_type,)).fetchall()
            return [dict(row) for row in rows]  # ✅ cleaner than zip+PRAGMA

    def query_by_location(self, keyword):
        with self.conn:
            rows = self.conn.execute("""
                SELECT * FROM incidents WHERE location LIKE ? ORDER BY time DESC
            """, (f"%{keyword}%",)).fetchall()
            return [dict(row) for row in rows] 
